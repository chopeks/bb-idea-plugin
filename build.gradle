plugins {
    id "org.jetbrains.intellij" version "0.4.2"
    id 'org.jetbrains.grammarkit' version '2018.3'
}

repositories {
    mavenCentral()
}

version = System.getenv().getOrDefault('BUILD_NUMBER', '1.2.0')

apply plugin: 'org.jetbrains.grammarkit'

import org.jetbrains.grammarkit.tasks.GenerateParser
import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.intellij.tasks.RunIdeTask

grammarKit {
    // version of IntelliJ patched JFlex
    jflexRelease = '1.7.0-2'

    // tag or short commit hash of Grammar-Kit to use
    grammarKitRelease = '2017.1.7'
}

//noinspection GroovyAssignabilityCheck
task generateSquirrelParser(type: GenerateParser) {
    source = 'src/com/sqide/Squirrel.bnf'
    targetRoot = 'gen'
    pathToParser = "/com/sqide/SquirrelParser.java"
    pathToPsiRoot = "/com/sqide/psi"
    purgeOldFiles = true
}

//noinspection GroovyAssignabilityCheck
task generateSquirrelLexer(type: GenerateLexer) {
    source = "src/com/sqide/lexer/SquirrelLexer.flex"
    skeleton = "tools/idea-flex.skeleton"
    targetDir = "gen/com/sqide/lexer/"
    targetClass = "_SquirrelLexer"
    purgeOldFiles = true
}

//noinspection GroovyAssignabilityCheck
task generateSquirrelDocLexer(type: GenerateLexer) {
    source = "src/com/sqide/lexer/SquirrelDocLexer.flex"
    skeleton = "tools/idea-flex.skeleton"
    targetDir = "gen/com/sqide/lexer/"
    targetClass = "_SquirrelDocLexer"
    purgeOldFiles = true
}

//noinspection GroovyAssignabilityCheck
task generateSquirrelParser2ndPass(type: GenerateParser) {
    doFirst {
        classpath sourceSets.main.runtimeClasspath
    }
    outputs.upToDateWhen { false }
    source = 'src/com/sqide/Squirrel.bnf'
    targetRoot = 'gen'
    pathToParser = "/com/sqide/SquirrelParser.java"
    pathToPsiRoot = "/com/sqide/psi"
    purgeOldFiles = true
}

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDirs 'resources', 'pluginResources', 'src'
    }
    test {
        java.srcDir 'tests'
    }
}

apply plugin: 'java'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//noinspection GroovyAssignabilityCheck
task generateCode {
    // todo separate lines?
    dependsOn generateSquirrelDocLexer, generateSquirrelLexer, generateSquirrelParser
}

//noinspection GroovyAssignabilityCheck
task compileJavaAgain(type: JavaCompile) {
    outputs.upToDateWhen { false }
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allSource.srcDirs
    destinationDir = file('build/classes/java/main')
}

compileJava {
    dependsOn generateCode
    finalizedBy generateSquirrelParser2ndPass, compileJavaAgain
}

apply plugin: 'org.jetbrains.intellij'

intellij {
    version 'LATEST-EAP-SNAPSHOT' // for a full list of releases see https://www.jetbrains.com/intellij-repository/releases
    pluginName 'Squirrel-KiWiPower'
    patchPluginXml {
        sinceBuild '131.0'
    }
}

apply plugin: 'idea'

idea {
    module {
        excludeDirs += [file("out"), file("gen")]
        generatedSourceDirs.add(file('src/gen'))
    }
}

// until v0.4.4 released
// see https://github.com/JetBrains/gradle-intellij-plugin/releases
tasks.withType(RunIdeTask) {
    jbreVersion('jbrex8u202b1483.4')
}