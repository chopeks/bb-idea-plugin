/* The following code was generated by JFlex 1.4.3 on 11/28/15 5:29 PM */

package com.squirrelplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.squirrelplugin.psi.SquirrelTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/15 5:29 PM from the specification file
 * <tt>/Users/neochief/Squirrel/src/com/squirrelplugin/_SquirrelLexer.flex</tt>
 */
public class _SquirrelLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\32\1\16"+
    "\1\4\1\0\1\40\1\35\1\0\1\24\1\25\1\5\1\33\1\30"+
    "\1\15\1\13\1\3\1\11\11\12\1\26\1\27\1\37\1\31\1\41"+
    "\2\0\4\10\1\14\25\10\1\22\1\17\1\23\1\36\1\7\1\0"+
    "\2\10\1\42\1\10\1\14\1\47\2\10\1\51\4\10\1\44\1\43"+
    "\3\10\1\45\1\46\1\50\5\10\1\20\1\34\1\21\54\0\1\6"+
    "\12\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6"+
    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\201\0\5\6"+
    "\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\10\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6"+
    "\43\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\0\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\131\6"+
    "\13\0\1\6\30\0\41\6\11\0\2\6\4\0\1\6\5\0\26\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6\107\0\1\6"+
    "\1\0\13\6\127\0\66\6\3\0\1\6\22\0\1\6\7\0\12\6"+
    "\17\0\7\6\1\0\7\6\5\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6"+
    "\15\0\2\6\1\0\3\6\16\0\2\6\23\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\37\0\4\6\1\0\1\6\23\0\3\6\20\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6"+
    "\22\0\1\6\17\0\2\6\43\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6"+
    "\1\0\3\6\17\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\26\0\1\6\64\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\32\0\2\6"+
    "\6\0\2\6\43\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\3\0\1\6\40\0\1\6\1\0\2\6\17\0\2\6"+
    "\22\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\20\0\1\6"+
    "\21\0\2\6\30\0\6\6\5\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\72\0\60\6\1\0\2\6\14\0\7\6"+
    "\72\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6"+
    "\1\0\1\6\25\0\4\6\40\0\1\6\77\0\10\6\1\0\44\6"+
    "\33\0\5\6\163\0\53\6\24\0\1\6\20\0\6\6\4\0\4\6"+
    "\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6"+
    "\21\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"+
    "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"+
    "\45\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\25\0\15\6\1\0\4\6\16\0\22\6\16\0\22\6"+
    "\16\0\15\6\1\0\3\6\17\0\64\6\43\0\1\6\4\0\1\6"+
    "\103\0\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0\35\6"+
    "\63\0\36\6\2\0\5\6\13\0\54\6\25\0\7\6\70\0\27\6"+
    "\11\0\65\6\122\0\1\6\135\0\57\6\21\0\7\6\67\0\36\6"+
    "\15\0\2\6\12\0\54\6\32\0\44\6\51\0\3\6\12\0\44\6"+
    "\153\0\4\6\1\0\4\6\3\0\2\6\11\0\300\6\100\0\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6\15\0\1\6"+
    "\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\64\0\2\6"+
    "\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\0\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\20\0\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\120\0\1\6"+
    "\u01d5\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6\6\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\0\2\6\24\0\57\6\20\0\31\6"+
    "\10\0\106\6\61\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6"+
    "\14\0\13\6\115\0\12\6\1\0\3\6\1\0\4\6\1\0\27\6"+
    "\35\0\64\6\16\0\62\6\76\0\6\6\3\0\1\6\16\0\34\6"+
    "\12\0\27\6\31\0\35\6\7\0\57\6\34\0\1\6\60\0\51\6"+
    "\27\0\3\6\1\0\10\6\24\0\27\6\3\0\1\6\5\0\60\6"+
    "\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6\1\0\1\6"+
    "\30\0\3\6\2\0\13\6\7\0\3\6\14\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\35\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0\207\6"+
    "\44\0\32\6\6\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\1\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\6\1\0\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\0\1\40"+
    "\1\0\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\2\6\1\0\1\35\1\0\1\40\1\62"+
    "\1\63\1\64\2\6\1\65\2\6\1\66\3\6\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\52\0\52\0\52\0\52"+
    "\0\52\0\52\0\u01f8\0\52\0\52\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\52\0\52\0\u0126\0\u041a\0\u0444\0\52\0\52"+
    "\0\u01ce\0\52\0\u046e\0\52\0\52\0\52\0\52\0\52"+
    "\0\52\0\52\0\52\0\52\0\u0498\0\52\0\52\0\52"+
    "\0\u04c2\0\52\0\52\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u0594\0\u01ce\0\52\0\52\0\52\0\u05be\0\u05e8\0\52"+
    "\0\u0612\0\u063c\0\374\0\u0666\0\u0690\0\u06ba\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\7"+
    "\1\10\1\11\1\12\1\7\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\4\7\1\40\2\7\53\0\2\3\52\0"+
    "\1\5\1\0\1\41\23\0\1\42\20\0\1\5\1\0"+
    "\50\5\31\0\1\43\27\0\4\7\1\0\1\7\25\0"+
    "\10\7\11\0\2\44\1\45\1\46\46\0\2\11\1\45"+
    "\1\46\46\0\2\45\54\0\1\47\13\0\1\50\20\0"+
    "\16\51\1\52\1\53\32\51\26\0\1\54\54\0\1\55"+
    "\51\0\1\56\51\0\1\57\1\0\1\60\47\0\1\61"+
    "\2\0\1\62\46\0\1\63\3\0\1\64\1\65\44\0"+
    "\1\66\35\0\1\67\13\0\1\70\5\0\1\71\43\0"+
    "\1\72\51\0\1\73\7\0\1\74\17\0\4\7\1\0"+
    "\1\7\25\0\1\7\1\75\6\7\7\0\4\7\1\0"+
    "\1\7\25\0\6\7\1\76\1\7\5\41\1\77\44\41"+
    "\11\0\2\45\1\0\1\46\46\0\2\100\2\0\1\101"+
    "\15\0\1\101\16\0\16\51\1\102\1\53\32\51\31\0"+
    "\1\103\51\0\1\104\51\0\1\105\27\0\4\7\1\0"+
    "\1\7\25\0\2\7\1\106\5\7\7\0\4\7\1\0"+
    "\1\7\25\0\2\7\1\107\5\7\3\41\1\110\1\41"+
    "\1\77\44\41\11\0\2\100\46\0\4\7\1\0\1\7"+
    "\25\0\3\7\1\111\4\7\7\0\4\7\1\0\1\7"+
    "\25\0\1\112\7\7\7\0\4\7\1\0\1\7\25\0"+
    "\4\7\1\113\3\7\7\0\4\7\1\0\1\7\25\0"+
    "\4\7\1\114\3\7\7\0\4\7\1\0\1\7\25\0"+
    "\7\7\1\115\7\0\4\7\1\0\1\7\25\0\1\7"+
    "\1\116\6\7\7\0\4\7\1\0\1\7\25\0\2\7"+
    "\1\117\5\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1764];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\6\11\1\1\2\11\13\1\1\0"+
    "\2\11\1\0\1\1\1\0\2\11\1\0\1\11\1\0"+
    "\11\11\1\1\3\11\1\1\2\11\3\1\1\0\1\1"+
    "\1\0\1\1\3\11\2\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SquirrelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SquirrelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1590) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return MINUS_MINUS;
          }
        case 56: break;
        case 3: 
          { return QUOTIENT;
          }
        case 57: break;
        case 55: 
          { return FUNCTION;
          }
        case 58: break;
        case 45: 
          { return LESS_OR_EQUAL;
          }
        case 59: break;
        case 44: 
          { return SEND_CHANNEL;
          }
        case 60: break;
        case 16: 
          { return SEMICOLON;
          }
        case 61: break;
        case 28: 
          { return MUL_ASSIGN;
          }
        case 62: break;
        case 42: 
          { return BIT_CLEAR;
          }
        case 63: break;
        case 9: 
          { return LBRACE;
          }
        case 64: break;
        case 10: 
          { return RBRACE;
          }
        case 65: break;
        case 11: 
          { return LBRACK;
          }
        case 66: break;
        case 12: 
          { return RBRACK;
          }
        case 67: break;
        case 23: 
          { return BIT_XOR;
          }
        case 68: break;
        case 17: 
          { return COMMA;
          }
        case 69: break;
        case 49: 
          { return SHIFT_RIGHT;
          }
        case 70: break;
        case 24: 
          { return LESS;
          }
        case 71: break;
        case 46: 
          { return SHIFT_LEFT;
          }
        case 72: break;
        case 15: 
          { return COLON;
          }
        case 73: break;
        case 19: 
          { return NOT;
          }
        case 74: break;
        case 53: 
          { return BLOCK_COMMENT;
          }
        case 75: break;
        case 35: 
          { return NOT_EQ;
          }
        case 76: break;
        case 22: 
          { return BIT_AND;
          }
        case 77: break;
        case 18: 
          { return ASSIGN;
          }
        case 78: break;
        case 7: 
          { return INT;
          }
        case 79: break;
        case 39: 
          { return COND_OR;
          }
        case 80: break;
        case 31: 
          { return MINUS_ASSIGN;
          }
        case 81: break;
        case 27: 
          { return QUOTIENT_ASSIGN;
          }
        case 82: break;
        case 40: 
          { return BIT_AND_ASSIGN;
          }
        case 83: break;
        case 38: 
          { return BIT_OR_ASSIGN;
          }
        case 84: break;
        case 4: 
          { return LINE_COMMENT;
          }
        case 85: break;
        case 51: 
          { return SHIFT_LEFT_ASSIGN;
          }
        case 86: break;
        case 48: 
          { return GREATER_OR_EQUAL;
          }
        case 87: break;
        case 26: 
          { return GREATER;
          }
        case 88: break;
        case 52: 
          { return SHIFT_RIGHT_ASSIGN;
          }
        case 89: break;
        case 50: 
          { return BIT_CLEAR_ASSIGN;
          }
        case 90: break;
        case 29: 
          { return FLOAT;
          }
        case 91: break;
        case 8: 
          { return MINUS;
          }
        case 92: break;
        case 33: 
          { return DOUBLE_COLON;
          }
        case 93: break;
        case 43: 
          { return BIT_XOR_ASSIGN;
          }
        case 94: break;
        case 32: 
          { return STRING;
          }
        case 95: break;
        case 25: 
          { return REMAINDER;
          }
        case 96: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 97: break;
        case 13: 
          { return LPAREN;
          }
        case 98: break;
        case 54: 
          { return CONST;
          }
        case 99: break;
        case 14: 
          { return RPAREN;
          }
        case 100: break;
        case 6: 
          { return IDENTIFIER;
          }
        case 101: break;
        case 21: 
          { return BIT_OR;
          }
        case 102: break;
        case 34: 
          { return EQ;
          }
        case 103: break;
        case 41: 
          { return COND_AND;
          }
        case 104: break;
        case 20: 
          { return PLUS;
          }
        case 105: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 106: break;
        case 36: 
          { return PLUS_ASSIGN;
          }
        case 107: break;
        case 5: 
          { return MUL;
          }
        case 108: break;
        case 47: 
          { return REMAINDER_ASSIGN;
          }
        case 109: break;
        case 37: 
          { return PLUS_PLUS;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
